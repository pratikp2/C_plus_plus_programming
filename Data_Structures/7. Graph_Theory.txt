    ********************************************************************************************

                            ***************************
                            *                         *
                            *       Graph theory      *
                            *                         *
                            ***************************

    ********************************************************************************************

    A graph "G" is an ordered pair of sets "V" vertices and Edges "E".
    it can be represented G = (V,E)

    For Following Example :
    G = (V,E) where V = {v1, v2, v3, v4, v5, v6, v7, v8} and,
    E = { {v1,v2}, {v1,v3}, {v1,v4}, {v2,v5}, {v2,v6}, {v3,v7}, {v4,v8}, {v7,v8}, {v5,v8}, {v6,v8} }


                    |V1| -------------------|V2|
                     | \                     /|
                  ___|  \                   / |___
                  |      \                 /      |
                 |V3|     \               /     |V6|
                  |        \             /       /
                  |        |V4|        |V5|    /
                 |V7|        \         /     /
                    \         \       /    /
                        \      \     /   /
                            \   \   /  /
                               \ \ / /
                                 |V8|

    Ordered Pair                            Unordered Pair
    (a,b) != (b,a) if a != b                {a,b} = {b,a}


    Edges :

    Directed Edge :-                    |         Undirected Edge :-
                                        |           No Direction present.
        (u,v)                           |
    v <---------> u                     |          v ---------- u
        (v,u)                           |
                                        |
    hence unordered                     |           hence un ordered pair
    (u,v) and (v,u)                     |           {u,v}



    ********************************************************************************************


            Undirected Graph                |                   Directed Graph
                                            |
                                            |
      |V1| -------------------|V2|          |             |V1| <----------------->|V2|
       | \                     /|           |              ^ ^                    ^ ^
    ___|  \                   / |___        |           ___|  \                   / |___
    |      \                 /      |       |           |      \                 /      |
   |V3|     \               /     |V6|      |          |V3|     \               /     |V6|
    |        \             /       /        |           ^        \             /       ^
    |        |V4|        |V5|    /          |           |        |V4|        |V5|    /
   |V7|        \         /     /            |          |V7|        ^         ^     /
        \       \       /    /              |               \       \       /    /
           \     \     /   /                |                  \     \     /   /
              \   \   /  /                  |                     \   \   /  /
                 \ \ / /                    |                        \ \ / /
                   |V8|                     |                          |V8|
                                            |
                                            |
    Example :                               |       Example :
                                            |
    Social Network -                        |       Web pages on internet -
    Multiple Nodes (Friends) Connected to   |       Multile pages connected to each other via
    to Each other with out any direction.   |       hyperlink. Connection is directred multiple
                                            |       nodes can be traveresed in single way.

    ********************************************************************************************

    Unweighted Graph :
        It's a graph where all the edges in the graph has unit value i,e. 1. Travesing distance
        between all the Nodes is same. Eg., Connetion between users of social networking sites,
        Webpags.

    Weighted Graph :
        It's type whwre all the Eges connecting node has a unique or different travesing cost
        Associated with it. Eg., Actual Map of Cities where all the roads(edges) connecting the
        cities has different distance (value).


                        250 Km
            |V1| -------------------|V2|
             | \                     /|
      130km _|  \                   / |___ 100 km
          |      \  150km          /      |
         |V3|     \         150km /      |V6|
          |        \             /       /
  170km   |        |V4|        |V5|    /
         |V7|        \         /     /
            \         \       /    /    250 km
                \      \     /   /
             50 km  \   \   /  /
                       \ \ / /
                        |V8|

    Self Loop :
        If origin and destination for an edge is same then node is self looped.

    Multi Edged Node :
        If a multiple edges has same origin and destination then those nodes are Multi edge
        nodes.

                            Path 1
                        -------------
                  V1 ---|           |--- V2
                        -------------
                            Path 2

    Simple Node :
        If a node is not self looped and do not has multi edge then it is called as Simple Node.

    Dense Graph :
        Contains too many edges across all nodes. Possibly each node is connected to other node via
        dedicated edge.

    Spars Grapg :
        Contains too few edges across all nodes. Not all nodes has dedicated egde to connect to other
        Nodes. To connect with them traversing via different is requied.

    Walk :
        Sequence of vertices where each adjecent pair is connected via edge.

    Closed Walk :
        Where a path starts and ends with same vertex and traversing cost is not zero.

    Simple Cycle :
        A closed walk in which other than start and end vertex no other vertex is repeted.

    Acyclic graph :
        A graph in which no cycle is present. A directed graph can be acyclic graph in which
        there can be loop due to connected edge but there can't be loop due to traversing i.e,
        restriction of edge direction.

    Path :
        A Walk in which no vertices are repeated (Hence No edges are repeated).

    Trail :
        A walk in which no edges are repeated but vertices can be repeated. (e.g, Diagram drawing game
        via connecting dots.)

    Not Connected Graph :
        This is a type of graph in which there are two sets of vertices and not single set of vertices
        shares and edge with other set of vertices.

    Weakly Connected :
        Type of graph in in which one or more vertex creates block i.e, one or more vertex just have incoming
        edges and not outgoing edges.

    Strongly Connected Graph :
        This is type of Graph in which there is path availabe to any vertex from any vertex.

    ********************************************************************************************

        DATA STRUCTURE 1 : Edge List Representation.  (Mainly used for spaars Graph E.g Facebook)


                  |A | -------------------|B |                          struct Edge   OR   class Edge
                   | \                     /|                           {
                ___|  \                   / |___                            char * StartVertex;
                |      \                 /      |                           char * EndVertex;
               |C |     \               /     |F |                          int weight;
                |        \             /       /                        };
                |        |D |        |E |    /
              |G |        \         /     /
                 \         \       /    /
                     \      \     /   /
                         \   \   /  /
                            \ \ / /
                              |H |


        Vertex_List :           |                   | Start Vertex  |   End Vertex  |   Cost    |
                                |                   |               |               |           |
            | A |               |                   |       A       |       B       |     5     |
            | B |               |                   |       A       |       C       |     10    |
            | C |               |                   |       A       |       D       |     11    |
            | D |               |                   |       B       |       E       |     13    |
            | E |               |                   |       B       |       F       |     17    |
            | F |               |                   |       C       |       G       |     9     |
            | G |               |                   |       D       |       H       |     100   |
            | H |               |                   |       E       |       H       |     20    |
                                |                   |       F       |       H       |     30    |
                                |                   |       G       |       H       |     50    |

        Hence
            string Vertex_List [MAX_SIZE];
            struct Edge edge_List [MAX_SIZE];

        Better to have Reference in the of start vertex and end vertex from Vertex_List in the edge_List instead
        of having actual value because if the string is too long then Edge list will have to store entire string
        again in edge list.

        OR

        Directly store indices of the Vertex_List inside edge_List.

        Cost :
        1. Time Complexity :    Depends on the type of operation we are performing.
        2. Space Complecity :   O|V| + O|E|

    ********************************************************************************************

        DATA STRUCTURE 2 : Adjacency Matrix Representation.  (Mainly used for Dense Graph but have disadvantages)


                      |A | -------------------|B |                          struct Edge   OR   class Edge
                       | \                     /|                           {
                    ___|  \                   / |___                            char * StartVertex;
                    |      \                 /      |                           char * EndVertex;
                   |C |     \               /     |F |                          int weight;
                    |        \             /       /                        };
                    |        |D |        |E |    /
                   |G |        \         /     /
                      \         \       /    /
                          \      \     /   /
                              \   \   /  /
                                 \ \ / /
                                  |H |
                                                                         Two dimensional Array A[MAX_SIZE][MAX_SIZE];

1                Vertex_List :          |                   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |
                                        |
                    | A |               |                0  |   0   |   5   |   7   |   3   |   0   |   0   |   0   |   0   |
                    | B |               |                1  |   5   |   0   |   0   |   0   |   2   |   9   |   0   |   0   |
                    | C |               |                2  |   7   |   0   |   0   |   0   |   0   |   0   |   1   |   0   |
                    | D |               |                3  |   3   |   0   |   0   |   0   |   0   |   0   |   0   |   9   |
                    | E |               |                4  |   0   |   2   |   0   |   0   |   0   |   0   |   0   |   9   |
                    | F |               |                5  |   0   |   9   |   0   |   0   |   0   |   0   |   0   |   4   |
                    | G |               |                6  |   0   |   0   |   1   |   0   |   0   |   0   |   0   |   6   |
                    | H |               |                7  |   0   |   0   |   0   |   6   |   9   |   9   |   4   |   0   |
                                        |
                                        |

                To store Cost : Using Simple Value
                To store empty code : invalid input number
                To mention no need to trace further : other invalid input check.


        Cost :
        1. Time Complexity :    Depends on the type of operation we are performing.
        2. Space Complecity :   O|V| + O|V*V|

    ********************************************************************************************

        DATA STRUCTURE 3 : Adjacency List Representation.  (Mainly used for Dense Graph )


              |A | -------------------|B |                          struct Edge   OR   class Edge
               | \                     /|                           {
            ___|  \                   / |___                            char * StartVertex;
            |      \                 /      |                           char * EndVertex;
           |C |     \               /     |F |                          int weight;
            |        \             /       /                        };
            |        |D |        |E |    /
           |G |        \         /     /
              \         \       /    /
                  \      \     /   /
                      \   \   /  /
                         \ \ / /
                          |H |



                Vertex_List :           |                        List Or BST
                                        |
                    | A |               |                0  |   1   |-->|   2   |-->|   3   |
                    | B |               |                1  |   0   |-->|   4   |-->|   5   |
                    | C |               |                2  |   0   |-->|   6   |
                    | D |               |                3  |   0   |-->|   7   |
                    | E |               |                4  |   1   |-->|   7   |
                    | F |               |                5  |   1   |-->|   7   |
                    | G |               |                6  |   2   |-->|   7   |
                    | H |               |                7  |   3   |-->|   6   |-->|  4   |-->|   5   |
                                        |
                                        |

        Cost :
        1. Time Complexity :    Depends on the type of operation we are performing.
        2. Space Complecity :   O|V| + O|e|

    ********************************************************************************************
