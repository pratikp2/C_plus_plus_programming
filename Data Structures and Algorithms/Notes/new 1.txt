************************************************ Google Interview Prep List ***********************************************************

1st Round Prep List :

1. Algorithm Complexity - big-O complexity analysis, theory of computation book.

2. Sorting				- say, Merge Sort, quicksort. DON'T USE BUBBLE SORT

3. Hashtables			- IMP You should be able to implement one using only arrays in your favorite language

4. Trees				- Binary trees, n-ary trees, and trie-trees at the very very least
						- balanced binary tree, whether it's a red/black tree, a splay tree or an AVL tree. You should its implementation.
						- You should know about tree traversal algorithms: BFS and DFS, and know the difference between inorder, postorder and preorder.
						
5. Graph				- There are three basic ways to represent a graph in memory (objects and pointers, matrix, and adjacency list), 
						  and you should familiarize yourself with each representation and its pros and cons.
						- You should know the basic graph traversal algorithms: breadth-first search and depth-first search. You should know their computational complexity, their tradeoffs, and how to implement them in real code.
						- You should try to study up on fancier algorithms, such as Dijkstra and A*, if you get a chance
						
6 Other Data Structure  - famous classes of NP-complete problems, such as traveling salesman and the knapsack problem, and be able to recognize
						  them when an interviewer asks you them in disguise.
						- You should find out what NP-complete means.
						
7. Math					- counting problems, probability problems, and other Discrete Math 101 situations
						- refreshing your memory on (or teaching yourself) the essentials of combinatorics and probability. You should be familiar
						  with n-choose-k problems and their ilk â€“ the more the better.
						  
8. Operating System		- processes, threads and concurrency issues.
						- Know about locks and mutexes and semaphores and monitors and how they work.
						- Know about deadlock and livelock and how to avoid them. Know what resources a processes needs, and a thread needs, and how
						  context switching works, and how it's initiated by the operating system and underlying hardware
						- Know a little about scheduling. The world is rapidly moving towards multi-core, and you'll be a dinosaur in a real hurry if
						  you don't understand the fundamentals of "modern" (which is to say, "kinda broken") concurrency constructs.  
						
						
Array, Linked List, Stack, Queue, Set, Maps, Binary Tree, Heap, Graph
Sort, Search, Binary Search, Devide and Conquer, Dynamic Programming and memorization, Greedy Algorithm, Recusion, Graph (BSF and DSF)
---------------------------------------------------------------------------------------

Long Term warm Up :
1. Keep your mind in problem splving state.
2. Drink Coffee 20 min prob solving

---------------------------------------------------------------------------------------

The day of interview : 
1. Get Plenty of sleep 
2. Solve a few problems before 1-1.30 from interview as warm (dont over do it)


---------------------------------------------------------------------------------------

In the Interview :
1. You can ask for some hints.

---------------------------------------------------------------------------------------


