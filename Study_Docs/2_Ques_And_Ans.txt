*************************************************************************************************************************************

Advantages of C++ :
    Object oriented
    Portable language (writing a program irrespective of operating system as well as Hardware)
    Low-level language like Assembly language on Machine language called portable.
    It is useful for the low-level programming language and very efficient for general purpose.
    C++ provide performance and memory efficiency.
    It provides a high-level abstraction.
    In the language of the problem domain.
    C++ is compatible with  C.
    C++ used reusability of code.
    C++ used inheritance, polymorphism.
    C++ use multi-paradigm programming. The Paradigm means the style of programming .paradigm concerned about logics, structure,
    and procedure of the program. C++ is multi-paradigm means it follows three paradigm Generic, Imperative, Object Oriented.

Portability :

    Portability allows developing program irrespective of hardware
    It allows moving the program development for one platform to another platform
    C compatible (COMP): Programs developed in ‘C’ language can be moved without any modifications into C++
    Which language having low-level features
    C++ is an object oriented embedded language which is having the characteristics of low-level language & which is also developing
    the embedded software.

Disadvantages :

    It has no security
    Complex in a very large high-level program.
    Used for platform specific application commonly.
    For a particular operating system or platform, the library set has usually chosen that locks.
    When C++ used for web applications complex and difficult to debug.
    C++ can’t support garbage collection.
    C++ is not secure because it has a pointer, friend function, and global variable.
    No support for threads built in.

*************************************************************************************************************************************
## . What is the purpose of the each access specifier ?

There are 3 access specifiers for a class/struct/Union in C++. These access specifiers define how the members of the class can be
accessed. Of course, any member of a class is accessible within that class(Inside any member function of that same class). Moving
ahead to type of access specifiers, they are:

Public 		- The members declared as Public are accessible from outside the Class through an object of the class.
Protected 	- The members declared as Protected are accessible from outside the class BUT only in a class derived from it.
Private 	- These members are only accessible from within the class. No outside Access is allowed.

*************************************************************************************************************************************
##. Can a Constructor/Destructor be private ?

If the constructor/destructor is declared as private, then the class cannot be instantiated. This is true, however it can be instantiated
from another method in the class. Similarly, if the destructor is private , then the object can only be deleted from inside the class as
well.

*************************************************************************************************************************************
##. Can constructor and destructor be virtual ? 

To build an object the constructor must be of the same type as the object and because of this a constructor cannot be a virtual function.
But the same thing does not apply to destructor . ... You would use a virtual destructor if you ever expect a derived class to be
destroyed through a pointer to the base class.
 
*************************************************************************************************************************************

##. Why Destructors in C++ are called in the opposite order of that of Constructors.

A derived class should be able to call methods and use data members of its base class. On the other hand, a base class does not
normallycall methods or use members of its derived class (generally, it doesn't know which derived class it's a part of).

For this reason, base class is constructed first and destroyed last, so that it's valid while the constructor and destructor of its
derived classes runs. There are many other scenarios that follow this pattern. For example, at the closing brace of a block, local
variables declared in that block are destroyed in the reverse order of construction, because a variable created later could depend
on the one created earlier.

*************************************************************************************************************************************
##. What is difference between Abstract Class and Interface ?

An abstract class is a class that has at least a pure virtual method. You can't create instances of that class, but you can have
implementation in it, that is shared with the derived classes.

an interface is a pure virtual class, with no implementation whatsoever.Interfaces cannot contain any data types(only functions)
whereas abstract classes can contain both.

*************************************************************************************************************************************
## Can we define Pure virtual function and if yes How to call it.

We can define pure virtual function, but it has to br defined out side of the class body.
I can be called via derived class using scope resolution.
e.g, Interface :: Function();

Pure virtual functions must not be called from a C++ constructor. As a general rule, you should never call any kind of virtual
function in a constructor or destructor because those calls will never go to a more derived class than the currently executing
constructor or destructor.

*************************************************************************************************************************************
## What is the Logic behind giving body to a pure virtual Function ?

Ideally Derived classes who overrides pure virtual function may call original Pure virtual function implementation somewhere in
their code.If part of the code of tow overriden functionalities from two distinct derived classes is similar then it makes sense
to move it up in the hierarchy, i,e in Pure Virtual Function.

*************************************************************************************************************************************
##. Can we delete this pointer ? 

Ideally delete operator should not be used for this pointer. However, if used, then following points must be considered.

1) delete operator works only for objects allocated using operator new . If the object is created using new, then we can
   do delete this, otherwise behavior is undefined.
2) Once delete this is done, any member of the deleted object should not be accessed after deletion.

Delete this is legal and does what you would expect: it calls your class's destructor and free the underlying memory.
After delete this returns, your this pointer value does not change, so it is now a dangling pointer that should not be dereferenced.
That includes implicit dereferencing using the class's member variables.

*************************************************************************************************************************************
##. Difference between Null char pointer and Null int pointer

Null pointer is a special reserved value of a pointer. A pointer of any type has such a reserved value. Formally, each specific pointer
type (int *, char * etc.) has its own dedicated null-pointer value. Conceptually, when a pointer has that null value it is not pointing
anywhere.

*************************************************************************************************************************************
##.Class:
--Class is a reference type and its object is created on the heap memory.
--Class can inherit the another class.
--Class can have the all types of constructor and destructor.
--The member variable of class can be initialized directly.
 
Structure
--Structure is a value type that is why its object is created on the stack memory.
--Structure does not support the inheritance.
--Structure can only have the parametrized constructor. it means a structure can not have the non-parametrized constructor,default
  constructor and destructor also.
--The member variable of structure can not be initialized directly.

*************************************************************************************************************************************
##. STORAGE CALSSES

STORAGE CALSSES		KEYWORD 	LIFETIME		VISIBILITY 		INITIAL VALUE
	
Automatic		auto 		Function Block 		Local 			Garbage
External		extern 		Whole Program 		Global 			Zero
Static			static 		Whole Program 		Local 			Zero
Register		register 	Function Block 		Local 			Garbage
Mutable			mutable 	Class 			Local 			Garbage

*************************************************************************************************************************************
##. Polymorphism

    Compile Time Polymorphism:
        1. Function Overloading.
        2. Operator Overloaving.
        3. Templates.
        4. auto keyword.

        Every declaration must have a known type at compile time so auto doesn't get
        special treatment, it has to deduce the type at compile time.

    Runtime Polymorphism:
        1. Function Overriding.

*************************************************************************************************************************************
 ## why to make Object Volatile ?

The volatile keyword is intended to prevent the compiler from applying any optimizations on objects that can change in ways that
cannot be determined by the compiler.Objects declared as volatile are omitted from optimization because their values can be 
changed by code outside the scope of current code at any time. The system always reads the current value of a volatile object from
the memory location rather than keeping its value in temporary register at the point it is requested, even if a previous instruction
asked for a value from the same object.

--Global variables modified by an interrupt service routine outside the scope(Geeks for Geeks)
--Global variables within a multi-threaded application

*************************************************************************************************************************************
## why to make function Volatile ?

volatile qualifier states that the member should be used with a volatile object(when used a volatile function all the member variables
will become volatile as well), that can be useful if you have a set of functions which are thread-safe, and another set which is not.
So you can design your class so that the thread-safe functions decleared with volatile qualifier, and if you want an object of that
class to be manipulated with threads or processes you will declear it as volatile.

*************************************************************************************************************************************
##. new Vs malloc();

        new 						malloc
	
calls constructor				doesnot calls constructors
It is an operator				It is a function
Returns exact data type				Returns void *
on failure, Throws exception                    On failure,returns NULL
Memory allocated from free store		Memory allocated from heap
can be overridden				cannot be overridden
size is calculated by compiler			size is calculated manually			<---- new and free or malloc and delete

*************************************************************************************************************************************
## What is ostream and istream classes ?

All C++ compilers come with classes for streaming input from the console and output to the console. These classes are defined by
putting the directive #include <iostream> at the top of the code. The istream class has methods for detecting input errors and the
end of input data. The ostream class has methods for formatting output, i.e. specifying scientific notation, fixed decimal notation,
or a combination thereof, and for specifying the number of decimal digits displayed. Using some of the features of these classes, we
add the capability of reading and writing our own custom types. Finally, the ifstream and ofstream classes let us read from and write
to named files.

*************************************************************************************************************************************
## What difference between 0 , NULL and \0 ? 

-0 - Integer constant for representing ZERO.
-0. - Double constant to represent ZERO.
-‘\0’ - Character constant to represent NULL (nochar)
-NULL - Macro to represent NULL pointer (May be expanded to ((void*)0) )
-nullptr - C++ keyword to represent NULL pointer.
*************************************************************************************************************************************
## Properties of main function :

-- Can use alias
-- Can be recursive.
*************************************************************************************************************************************
## Mutex Vs Semaphore

Semaphore :
A semaphore restricts the number of simultaneous users of a shared resource up to a maximum number. Threads can request access to the
resource (decrementing the semaphore), and can signal that they have finished using the resource (incrementing the semaphore).

Mutex :
Mutexes are typically used to serialise access to a section of re-entrant code that cannot be executed concurrently by more than one
thread. A mutex object only allows one thread into a controlled section, forcing other threads which attempt to gain access to that
section to wait until the first thread has exited from that section

There is an ambiguity between binary semaphore and mutex. We might have come across that a mutex is binary semaphore. But they are not.
A mutex is locking mechanism and Semaphore is signaling mechanism.
*************************************************************************************************************************************

## Compilation :

1.Preprocessing	:	cc -E hello_world.cpp

The first stage of compilation is called preprocessing. In this stage, lines starting with a # character are interpreted by the 
preprocessor as preprocessor commands. These commands form a simple macro language with its own syntax and semantics. This language
is used to reduce repetition in source code by providing functionality to inline files, define macros, and to conditionally omit code.

2.Compailation :	cc -S hello_world.cpp

In this stage, the preprocessed code is translated to assembly instructions specific to the target processor architecture. These
form an intermediate human readable language. The existence of this step allows for C code to contain inline assembly instructions
and for different assemblers to be used.

3. Assembly	   :	cc -c hello_world.cpp

During this stage, an assembler is used to translate the assembly instructions to object code. The output consists of actual
instructions to be run by the target processor.

4. Linking	   :	cc -o hello_world hello_world.c

The object code generated in the assembly stage is composed of machine instructions that the processor understands but some pieces
of the program are out of order or missing. To produce an executable program, the existing pieces have to be rearranged and the 
missing ones filled in. This process is called linking. The linker will arrange the pieces of object code so that functions in 
some pieces can successfully call functions in other ones. It will also add pieces containing the instructions for library functions
used by the program.
*************************************************************************************************************************************

## Libraries and Executables.

Executable files: 
These are files consisting mostly driver logic or self contained code that can be run directly.

Libraries: 
These are files that contain reusable code that can be invoked by another library or an executable.

A static library(.a) OR (.lib):
a library that can be linked directly into the final executable produced by the linker,it is contained in the executable it self
and hence there is no need to have the library into the system where the executable will be deployed. Library has to be present in
compile time for static linking.

A shared library(.so):
a library that is linked but not embedded in the final executable, so will be loaded when the executable is launched and need to
be present in the system where the executable is deployed.

A dynamic link library on windows(.dll)
is like a shared library(.so) on linux but there are some differences between the two implementations that are related to the OS
(Windows vs Linux) :
A DLL can define two kinds of functions: exported and internal. The exported functions are intended to be called by other modules,
as well as from within the DLL where they are defined. Internal functions are typically intended to be called only from within the
DLL where they are defined.
An SO library on Linux doesn't need special export statement to indicate exportable symbols, since all symbols are available to an
interrogating process.

The dlopen(3) function opens a library and prepares it for use. In C its prototype is:   void * dlopen(const char *filename, int flag);

The dlsym() function shall search for the named symbol in all objects loaded automatically as a result of loading the object
referenced by handle (see dlopen()). Load ordering is used in dlsym() operations upon the global symbol object. The symbol resolution
algorithm used shall be dependency order as described in dlopen(). :    void *dlsym(void *restrict handle, const char *restrict name);
*************************************************************************************************************************************

## What is complexity of an algorithm?

Algorithm complexity is a measure which evaluates the order of the count of operations, performed by a given or algorithm as a function
of the size of the input data. To put this simpler, complexity is a rough approximation of the number of steps necessary to execute an
algorithm.
*************************************************************************************************************************************
